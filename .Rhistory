require(c("devtools", "testthat", "knitr"))
library(roxygen2)
library(devtools)
library(survey)
has_devel()
.onLoad <- function(libname, pkgname){
packageStartupMessage("Welcome to a package that checks your data cleaning")
}
print(rtools_path() )
has_rtools()
usethis::use_test()
data <- read.csv("data.csv")
save(data, file"data.RDA")
data[data$survey_consent != "no_eligible"]
save(data, file = "data.RDA")
smol <- data[data$survey_consent != "no_eligible",]
data <- data[data$survey_consent != "no_eligible",]
save(data, file = "data.RDA")
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
find_duplicates(data, "uuid")
library(dplyr)
find_duplicates(data, "uuid")
find_duplicates(data, "uucvfdaid")
source('~/GitHub/cleaninginspectoR/R/sanitisation.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
devtools::build_vignettes()
devtools::load_all(".")
devtools::load_all()
library(cleaninginspectoR)
usethis::use_vignette("Quickstart")
ls()
smol
library(cleaninginspectoR)
devtools::build(vignettes = T)
devtools::load_all()
devtools::install()
remotes::install_github("ellieallien/cleaninginspectoR")
has_rtools()
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
devtools::document()
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
reachR::wtd.table
wtd.table
source('~/GitHub/cleaninginspectoR/R/utilities.R')
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
source('~/GitHub/cleaninginspectoR/R/utilities.R')
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
others <- frequency_tables %>% melt %>% setcolnames(c("value",
"count", "variable"))
#
devtools::use_package("melt")
#
devtools::use_package("reshape")
#
usethis::use_package("reshape")
install.packages("reshape")
others <- frequency_tables %>% melt %>% setcolnames(c("value",
"count", "variable"))
library(reshape)
others <- frequency_tables %>% melt %>% setcolnames(c("value",
"count", "variable"))
others <- frequency_tables %>% melt
frequency_tables <- data %>% select_other_columns %>% aggregate_count %>% as.data.frame
others <- lapply(frequency_tables, melt)
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
frequency_tables$1
frequency_tables[1]
frequency_tables[3]
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
if (length(frequency_tables) == 0) {
return(empty_issues_table())
}
others <- lapply(frequency_tables, melt)
others <- frequency_tables %>% unlist
others <- frequency_tables %>% unlist %>%  melt
others <- frequency_tables %>% melt
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
data[]
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
reachR::aggregate_count
source('~/GitHub/cleaninginspectoR/R/utilities.R')
usethis::use_package("questionr")
library(questionr)
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
source('~/GitHub/cleaninginspectoR/R/utilities.R')
frequency_tables <- data %>% select_other_columns %>% aggregate_count
others <- frequency_tables %>% melt %>% setcolnames(c("value", "count", "variable"))
source('~/GitHub/cleaninginspectoR/R/standard_checks.R')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
find_duplicates(data, duplicate.column.name = "uuid")
#
# data <- read.csv("data.csv")
# data <- data[data$survey_consent != "no_eligible",]
data$X_uuid
#
# data <- read.csv("data.csv")
# data <- data[data$survey_consent != "no_eligible",]
data$X_uuid[67] <- 3cb1c52b-d931-4b11-a848-eb7cffc7b01
#
# data <- read.csv("data.csv")
# data <- data[data$survey_consent != "no_eligible",]
data$X_uuid[67] <- "3cb1c52b-d931-4b11-a848-eb7cffc7b01"
#
# data <- read.csv("data.csv")
# data <- data[data$survey_consent != "no_eligible",]
data$X_uuid[[67]] <- c("3cb1c52b-d931-4b11-a848-eb7cffc7b01")
#
# data <- read.csv("data.csv")
# data <- data[data$survey_consent != "no_eligible",]
data$X_uuid <- c("3cb1c52b-d931-4b11-a848-eb7cffc7b01")
#
data <- read.csv("data.csv")
data <- data[data$survey_consent != "no_eligible",]
data$X_uuid <- as.character(data$X_uuid)
data$X_uuid
data <- readRDS(file = "data/data.RDA")
